# Generated by Django 2.2.11 on 2021-07-22 16:29

from django.db import migrations, models
import uuid

def forward_certificates(apps, schema_editor):
    SamlProvider = apps.get_model("saml2_pro_auth", "SamlProvider")

    # Transfer idp_x509 into new PEMCertificate model and assign as first signing certificate
    for provider in SamlProvider.objects.all():
        provider.idp_x509_signing_certificates.create(
            name=f"{provider.name} signing certificate",
            certificate=provider.idp_x509
        )

    
def backward_certificates(apps, schema_editor):
    SamlProvider = apps.get_model("saml2_pro_auth", "SamlProvider")

    # Revert the value from first signing certificate (which must be available because of blank=False)
    # into the old idp_x509 path
    for provider in SamlProvider.objects.all():
        provider.idp_x509 = provider.idp_x509_signing_certificates.first().certificate
        provider.save(update_fields=["idp_x509"])


class Migration(migrations.Migration):

    dependencies = [
        ('saml2_pro_auth', '0002_samlprovider_idp_x509_signing_key'),
    ]

    operations = [
        migrations.CreateModel(
            name='PEMCertificate',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='A descriptive name for the PEM certificate.', max_length=50, verbose_name='Name')),
                ('certificate', models.TextField(help_text='A PEM encoded public certificate.', verbose_name='Certificate')),
            ],
        ),
        migrations.AddField(
            model_name='samlprovider',
            name='idp_x509_encryption_certificates',
            field=models.ManyToManyField(blank=True, related_name='encryption_providers', to='saml2_pro_auth.PEMCertificate', verbose_name='IdP Encryption Certificates'),
        ),
        migrations.AddField(
            model_name='samlprovider',
            name='idp_x509_signing_certificates',
            field=models.ManyToManyField(related_name='signing_providers', to='saml2_pro_auth.PEMCertificate', verbose_name='IdP Signing Certificates'),
        ),

        migrations.RunPython(forward_certificates, backward_certificates),

        # This part is required to make the migration reversible, because idp_x509 is non-nullable otherwise.
        # N/A will then be overwritten by the backward_certificates migration
        migrations.AlterField(
            model_name='samlprovider',
            name='idp_x509',
            field=models.TextField(
                help_text="A PEM encoded public certificate provided by your Identity Provider.",
                verbose_name="IdP Certificate",
                default="N/A"
            ),
            preserve_default=True
        ),

        # Finally, remove old idp_x509 field
        migrations.RemoveField(
            model_name='samlprovider',
            name='idp_x509',
        ),

        migrations.RemoveField(
            model_name='samlprovider',
            name='idp_x509_signing_key',
        ),
    ]
